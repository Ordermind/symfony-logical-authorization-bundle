services:

  # Core services

  logauth.cache_warmer.permissions:
    class: Ordermind\LogicalAuthorizationBundle\EventListener\PermissionsCacheWarmer
    arguments: ['@logauth.service.permission_tree_builder']
    tags:
      - {name: kernel.cache_warmer}
    public: false

  logauth.security.request_voter:
    class: Ordermind\LogicalAuthorizationBundle\Security\RequestVoter
    arguments: ['@logauth.service.logauth_route']
    tags:
      - {name: security.voter}
    public: false

  logauth.event_listener.add_route_permissions:
    class: Ordermind\LogicalAuthorizationBundle\EventListener\AddRoutePermissions
    arguments: ['@router']
    tags:
      - {name: kernel.event_listener, event: logauth.add_permissions, method: onAddPermissions}
    public: false

  logauth.event_listener.add_app_config_permissions:
    class: Ordermind\LogicalAuthorizationBundle\EventListener\AddAppConfigPermissions
    arguments: ['%logauth.config%']
    tags:
      - {name: kernel.event_listener, event: logauth.add_permissions, method: onAddPermissions, priority: -250}
    public: false

  logauth.twig.extension:
    class: Ordermind\LogicalAuthorizationBundle\Twig\LogicalAuthorizationExtension
    arguments: ['@logauth.service.logauth_route', '@logauth.service.logauth_model']
    tags:
      - {name: twig.extension}
    public: false

  logauth.service.logical_permissions_proxy:
    class: Ordermind\LogicalAuthorizationBundle\Services\LogicalPermissionsProxy
    public: false

  logauth.service.helper:
    class: Ordermind\LogicalAuthorizationBundle\Services\Helper
    arguments: ['%kernel.environment%', '@security.token_storage', '@?logger']
    public: false

  logauth.service.permission_tree_builder:
    class: Ordermind\LogicalAuthorizationBundle\Services\PermissionTreeBuilder
    arguments: ['@logauth.service.logical_permissions_proxy', '@event_dispatcher', '@cache.app']
    public: false

  logauth.service.logauth_route:
    class: Ordermind\LogicalAuthorizationBundle\Services\LogicalAuthorizationRoute
    arguments: ['@logauth.service.logauth', '@logauth.service.permission_tree_builder', '@router', '@logauth.service.helper', '@?logauth.debug.collector']
    public: false

  logauth.service.logauth_model:
    class: Ordermind\LogicalAuthorizationBundle\Services\LogicalAuthorizationModel
    arguments: ['@logauth.service.logauth', '@logauth.service.permission_tree_builder', '@logauth.service.helper', '@?logauth.debug.collector']
    public: false

  logauth.service.logauth:
    class: Ordermind\LogicalAuthorizationBundle\Services\LogicalAuthorization
    arguments: ['@logauth.service.logical_permissions_proxy', '@logauth.service.helper']
    public: false

  logauth.routing.yml_file_loader:
    class: Ordermind\LogicalAuthorizationBundle\Routing\YamlLoader
    arguments: ['@file_locator']
    tags:
      - {name: routing.loader}
    public: false

  logauth.routing.xml_file_loader:
    class: Ordermind\LogicalAuthorizationBundle\Routing\XmlLoader
    arguments: ['@file_locator']
    tags:
      - {name: routing.loader}
    public: false

  logauth.routing.annotation_file_loader:
    class: Ordermind\LogicalAuthorizationBundle\Routing\AnnotationFileLoader
    arguments: ['@file_locator', '@logauth.routing.annotation_class_loader']
    tags:
      - {name: routing.loader}
    public: false

  logauth.routing.annotation_dir_loader:
    class: Ordermind\LogicalAuthorizationBundle\Routing\AnnotationDirectoryLoader
    arguments: ['@file_locator', '@logauth.routing.annotation_class_loader']
    tags:
      - {name: routing.loader}
    public: false

  logauth.routing.annotation_class_loader:
    class: Ordermind\LogicalAuthorizationBundle\Routing\AnnotationClassLoader
    arguments: ['@annotation_reader']

  # Permission type handlers

  logauth.permission_type.flag:
    class: Ordermind\LogicalAuthorizationBundle\PermissionTypes\Flag\FlagManager
    tags:
      - {name: logauth.tag.permission_type}
    public: false

  logauth.permission_type.flag.user_can_bypass_access:
    class: Ordermind\LogicalAuthorizationBundle\PermissionTypes\Flag\Flags\UserCanBypassAccess
    tags:
      - {name: logauth.tag.permission_type.flag}
    public: false

  logauth.permission_type.flag.user_has_account:
    class: Ordermind\LogicalAuthorizationBundle\PermissionTypes\Flag\Flags\UserHasAccount
    tags:
      - {name: logauth.tag.permission_type.flag}
    public: false

  logauth.permission_type.flag.user_is_author:
    class: Ordermind\LogicalAuthorizationBundle\PermissionTypes\Flag\Flags\UserIsAuthor
    tags:
      - {name: logauth.tag.permission_type.flag}
    public: false

  logauth.permission_type.role:
    class: Ordermind\LogicalAuthorizationBundle\PermissionTypes\Role\Role
    arguments: ['@security.role_hierarchy']
    tags:
      - {name: logauth.tag.permission_type}
    public: false

  logauth.permission_type.host:
    class: Ordermind\LogicalAuthorizationBundle\PermissionTypes\Host\Host
    arguments: ['@request_stack']
    tags:
      - {name: logauth.tag.permission_type}
    public: false

  logauth.permission_type.method:
    class: Ordermind\LogicalAuthorizationBundle\PermissionTypes\Method\Method
    arguments: ['@request_stack']
    tags:
      - {name: logauth.tag.permission_type}
    public: false

  logauth.permission_type.ip:
    class: Ordermind\LogicalAuthorizationBundle\PermissionTypes\Ip\Ip
    arguments: ['@request_stack']
    tags:
      - {name: logauth.tag.permission_type}
    public: false
