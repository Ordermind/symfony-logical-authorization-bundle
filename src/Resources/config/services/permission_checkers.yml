# Permission checkers

services:
    logauth.permission_checker.flag:
        class: Ordermind\LogicalAuthorizationBundle\PermissionType\Flag\FlagManager
        arguments: [!tagged logauth.tag.permission_checker.flag]
        tags:
            - {name: logauth.tag.permission_checker}
        public: false

    logauth.permission_checker.flag.user_can_bypass_access:
        class: Ordermind\LogicalAuthorizationBundle\PermissionType\Flag\Flags\UserCanBypassAccess
        tags:
            - {name: logauth.tag.permission_checker.flag}
        public: false

    logauth.permission_checker.flag.user_has_account:
        class: Ordermind\LogicalAuthorizationBundle\PermissionType\Flag\Flags\UserHasAccount
        tags:
            - {name: logauth.tag.permission_checker.flag}
        public: false

    logauth.permission_checker.flag.user_is_author:
        class: Ordermind\LogicalAuthorizationBundle\PermissionType\Flag\Flags\UserIsAuthor
        tags:
            - {name: logauth.tag.permission_checker.flag}
        public: false

    logauth.permission_checker.role:
        class: Ordermind\LogicalAuthorizationBundle\PermissionType\Role\Role
        arguments: ['@security.role_hierarchy']
        tags:
            - {name: logauth.tag.permission_checker}
        public: false

    logauth.permission_checker.host:
        class: Ordermind\LogicalAuthorizationBundle\PermissionType\Host\Host
        arguments: ['@request_stack']
        tags:
            - {name: logauth.tag.permission_checker}
        public: false

    logauth.permission_checker.method:
        class: Ordermind\LogicalAuthorizationBundle\PermissionType\Method\Method
        arguments: ['@request_stack']
        tags:
            - {name: logauth.tag.permission_checker}
        public: false

    logauth.permission_checker.ip:
        class: Ordermind\LogicalAuthorizationBundle\PermissionType\Ip\Ip
        arguments: ['@request_stack']
        tags:
            - {name: logauth.tag.permission_checker}
        public: false