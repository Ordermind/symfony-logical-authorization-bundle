services:
    # Core services

    logauth.cache_warmer.permissions:
        class: Ordermind\LogicalAuthorizationBundle\EventListener\PermissionsCacheWarmer
        arguments: ['@logauth.service.permission_tree_builder']
        tags:
            - {name: kernel.cache_warmer}
        public: false

    logauth.security.expression_provider:
        class: Ordermind\LogicalAuthorizationBundle\Security\ExpressionProvider
        arguments: ['@logauth.service.logauth_route']
        tags:
            - {name: security.expression_language_provider}
        public: false

    logauth.event_listener.add_route_permissions:
        class: Ordermind\LogicalAuthorizationBundle\EventListener\AddRoutePermissions
        arguments: ['@router']
        tags:
            - {name: kernel.event_listener, event: logauth.add_permissions, method: onAddPermissions}
        public: false

    logauth.event_listener.add_app_config_permissions:
        class: Ordermind\LogicalAuthorizationBundle\EventListener\AddAppConfigPermissions
        arguments: ['%logauth.config%']
        tags:
            - {name: kernel.event_listener, event: logauth.add_permissions, method: onAddPermissions, priority: -250}
        public: false

    logauth.twig.extension:
        class: Ordermind\LogicalAuthorizationBundle\Twig\LogicalAuthorizationExtension
        arguments: ['@logauth.service.logauth_route', '@logauth.service.logauth_model']
        tags:
            - {name: twig.extension}
        public: false

    logauth.service.helper:
        class: Ordermind\LogicalAuthorizationBundle\Services\Helper
        arguments: ['%kernel.environment%', '@security.token_storage', '@?logger']
        public: false

    logauth.service.permission_tree_builder:
        class: Ordermind\LogicalAuthorizationBundle\Services\PermissionTreeBuilder
        arguments: ['@logical_permissions.permission_checker_locator', '@event_dispatcher', '@cache.app']
        public: false

    logauth.bypass_access_checker:
        class: Ordermind\LogicalAuthorizationBundle\BypassAccessChecker\BypassAccessChecker
        arguments: ['@logauth.permission_checker.flag.user_can_bypass_access']
        public: false

    logauth.service.logauth_route:
        class: Ordermind\LogicalAuthorizationBundle\Services\LogicalAuthorizationRoute
        arguments: ['@logauth.service.logauth', '@logauth.service.permission_tree_builder', '@router', '@logauth.service.helper', '@?logauth.debug.collector']
        public: false

    logauth.service.logauth_model:
        class: Ordermind\LogicalAuthorizationBundle\Services\LogicalAuthorizationModel
        arguments: ['@logauth.service.logauth', '@logauth.service.permission_tree_builder', '@logauth.service.helper', '@?logauth.debug.collector']
        public: false

    logauth.service.logauth:
        class: Ordermind\LogicalAuthorizationBundle\Services\LogicalAuthorization
        arguments: ['@logical_permissions.facade', '@logauth.service.helper']
        public: false

    logauth.routing.yml_file_loader:
        class: Ordermind\LogicalAuthorizationBundle\Routing\YamlLoader
        arguments: ['@file_locator']
        tags:
            - {name: routing.loader}
        public: false

    logauth.routing.xml_file_loader:
        class: Ordermind\LogicalAuthorizationBundle\Routing\XmlLoader
        arguments: ['@file_locator']
        tags:
            - {name: routing.loader}
        public: false

    logauth.routing.annotation_file_loader:
        class: Ordermind\LogicalAuthorizationBundle\Routing\AnnotationFileLoader
        arguments: ['@file_locator', '@logauth.routing.annotation_class_loader']
        tags:
            - {name: routing.loader}
        public: false

    logauth.routing.annotation_dir_loader:
        class: Ordermind\LogicalAuthorizationBundle\Routing\AnnotationDirectoryLoader
        arguments: ['@file_locator', '@logauth.routing.annotation_class_loader']
        tags:
            - {name: routing.loader}
        public: false

    logauth.routing.annotation_class_loader:
        class: Ordermind\LogicalAuthorizationBundle\Routing\AnnotationClassLoader
        arguments: ['@annotation_reader']
        public: false

    # Permission type handlers

    logauth.permission_checker.flag:
        class: Ordermind\LogicalAuthorizationBundle\PermissionType\Flag\FlagManager
        arguments: [!tagged logauth.tag.permission_checker.flag]
        tags:
            - {name: logauth.tag.permission_checker}
        public: false

    logauth.permission_checker.flag.user_can_bypass_access:
        class: Ordermind\LogicalAuthorizationBundle\PermissionType\Flag\Flags\UserCanBypassAccess
        tags:
            - {name: logauth.tag.permission_checker.flag}
        public: false

    logauth.permission_checker.flag.user_has_account:
        class: Ordermind\LogicalAuthorizationBundle\PermissionType\Flag\Flags\UserHasAccount
        tags:
            - {name: logauth.tag.permission_checker.flag}
        public: false

    logauth.permission_checker.flag.user_is_author:
        class: Ordermind\LogicalAuthorizationBundle\PermissionType\Flag\Flags\UserIsAuthor
        tags:
            - {name: logauth.tag.permission_checker.flag}
        public: false

    logauth.permission_checker.role:
        class: Ordermind\LogicalAuthorizationBundle\PermissionType\Role\Role
        arguments: ['@security.role_hierarchy']
        tags:
            - {name: logauth.tag.permission_checker}
        public: false

    logauth.permission_checker.host:
        class: Ordermind\LogicalAuthorizationBundle\PermissionType\Host\Host
        arguments: ['@request_stack']
        tags:
            - {name: logauth.tag.permission_checker}
        public: false

    logauth.permission_checker.method:
        class: Ordermind\LogicalAuthorizationBundle\PermissionType\Method\Method
        arguments: ['@request_stack']
        tags:
            - {name: logauth.tag.permission_checker}
        public: false

    logauth.permission_checker.ip:
        class: Ordermind\LogicalAuthorizationBundle\PermissionType\Ip\Ip
        arguments: ['@request_stack']
        tags:
            - {name: logauth.tag.permission_checker}
        public: false


    # Register classes from the Logical Permission library as services
    logical_permissions.permission_checker_locator:
        class: Ordermind\LogicalPermissions\PermissionCheckerLocator
        arguments: [!tagged logauth.tag.permission_checker]
        public: false

    logical_permissions.facade:
        class: Ordermind\LogicalPermissions\LogicalPermissionsFacade
        arguments: ['@logical_permissions.permission_checker_locator', '@logauth.bypass_access_checker']
        public: false